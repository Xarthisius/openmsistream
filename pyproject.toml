[tool.black]
line-length = 90
target-version = ['py39']
exclude = ["version.py"]

[build-system]
requires = ["setuptools>=61", "wheel", "setuptools_scm"]
build-backend = "setuptools.build_meta"

[project]
name = "openmsistream"
dynamic = ["version"]
description = "Python applications for materials data streaming using Apache Kafka. Developed for Open MSI (NSF DMREF award #1921959)"
readme = "README.md"
authors = [
    { name = "OpenMSIStream", email = "openmsistream@gmail.com" }
]
license = { text = "GNU GPLv3" }
requires-python = ">=3.7,<3.12"
dependencies = [
    "atomicwrites>=1.4.1",
    "boto3>=1.26.84",
    "confluent-kafka>=2.0.2",
    "girder-client>=3.1.20",
    "kafka-python>=2.0.2",
    "kafkacrypto>=0.9.10.3",
    "matplotlib",
    "methodtools",
    "msgpack",
    "openmsitoolbox>=1.2.4",
    "watchdog>=3.0.0"
]
keywords = [
    "data_streaming",
    "stream_processing",
    "apache_kafka",
    "materials",
    "data_science"
]
classifiers = [
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.9",
    "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
    "Operating System :: OS Independent"
]

[project.optional-dependencies]
test = [
    "beautifulsoup4",
    "black",
    "docker",
    "gitpython",
    "lxml",
    "marko[toc]==1.3.0",
    "packaging",
    "pyflakes>=3.0.1",
    "pylint>=2.16.3",
    "requests",
    "responses",
    "tempenv>=2.0.0",
    "unittest-xml-reporting"
]
docs = [
    "sphinx>=6.1.3",
    "sphinx_rtd_theme>=1.2.0"
]
dev = [
    "twine"
]
all = [
    "beautifulsoup4",
    "black",
    "docker",
    "gitpython",
    "lxml",
    "marko[toc]==1.3.0",
    "packaging",
    "pyflakes>=3.0.1",
    "pylint>=2.16.3",
    "requests",
    "responses",
    "tempenv>=2.0.0",
    "unittest-xml-reporting",
    "sphinx>=6.1.3",
    "sphinx_rtd_theme>=1.2.0",
    "twine"
]

[project.scripts]
UploadDataFile = "openmsistream.data_file_io.entity.upload_data_file:main"
DataFileUploadDirectory = "openmsistream.data_file_io.actor.data_file_upload_directory:main"
DataFileDownloadDirectory = "openmsistream.data_file_io.actor.data_file_download_directory:main"
InstallService = "openmsistream.services.install_service:main"
ManageService = "openmsistream.services.manage_service:main"
ProvisionNode = "openmsistream.tools.provision_wrapper:main"
ReproduceUndecryptableMessages = "openmsistream.tools.undecryptable_messages.reproduce_undecryptable_messages:main"
S3TransferStreamProcessor = "openmsistream.s3_buckets.s3_transfer_stream_processor:main"
GirderUploadStreamProcessor = "openmsistream.girder.girder_upload_stream_processor:main"

[tool.setuptools]
packages = ["openmsistream"]
include-package-data = true

[tool.setuptools_scm]
write_to = "openmsistream/version.py"
